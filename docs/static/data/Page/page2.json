{
    "data": [
        {
            "title": "energy-sector-now-on-blockchain-based-cryptocurrency.md",
            "date": "Tue, 10 Jul 2018 02:08:28 GMT",
            "slug": "能源行业聚焦基于区块链技术的加密货币",
            "category": "区块链",
            "tag": "",
            "des": "Envion 是一家在瑞士注册的区块链公司，专注于提供挖矿基础设施以及区块链挖掘技术。该公司为了实现全球可再生能源的价值最大化，提供了很好的解决方案。加密货币的重商主义（商业本位）属性受到了全球的追捧，因此 Envion 试图彻底改变数字货币的挖掘方式。目前像挖掘比特币这样的加密货币需要非常精密的硬件来处理高级运算。为了扩大能源产业链的价值，Envion 建立了一套覆盖全球的智能系统，该系统由卫星……",
            "tags": "Envion"
        },
        {
            "title": "vuejs-or-react-which-you-would-chose-and-why.md",
            "date": "Mon, 02 Jul 2018 00:43:26 GMT",
            "slug": "Vue.js 还是 React？你会选择哪一个？为什么？",
            "category": "前端",
            "tag": "",
            "des": "两者之间的区别很有意思，但不仅仅局限于 JSX 与 Templates 或者丰富的 API 与少量的 API 的区别。React 和 Vue 两者之间的选择可能导致截然不同的结果，这一点在你一开始选择的时候可能并没有意识到。当选择一个框架的时候，一个重要的问题是「我希望项目的复杂性在哪个部分」。React 和 Vue 可以完成很多相同的东西，但它们的实现方式截然不同。从一些反馈来看，我很好奇是否有……",
            "tags": "框架"
        },
        {
            "title": "maybe-you-dont-need-rust-to-speed-up-your-js-1.md",
            "date": "Mon, 02 Jul 2018 00:43:26 GMT",
            "slug": "或许你并不需要 Rust 和 WASM 来提升 JS 的执行效率 — 第一部分",
            "category": "前端",
            "tag": "",
            "des": "几个星期前，我在 Twitter 上看到一篇名为 “Oxidizing Source Maps with Rust and WebAssembly” 的推文，其内容主要是讨论用 Rust 编写的 WebAssembly 替换 source-map 库中纯 JavaScript 编写的核心代码所带来的性能优势。这篇文章使我感兴趣的原因，并不是因为我擅长 Rust 或 WASM，而是因为我总是对语言特……",
            "tags": "Javascript"
        },
        {
            "title": "introduction-to-accessibility-for-android-apps-and-games.md",
            "date": "Mon, 02 Jul 2018 00:43:26 GMT",
            "slug": "安卓应用和游戏的无障碍开发介绍",
            "category": "Mobile",
            "tag": "",
            "des": "虽然我们的目标是设计和开发迎合广大受众群体的应用，但我们不应该忘记，使用安卓和 Google Play 的用户中还有相当一部分是残疾人。据 世界卫生组织 估计，世界人口的 15％，大约 10 亿人，有不同程度的听力，视觉，认知以及运动功能方面的残疾。这些会影响到他们与科技之间进行互动的方式，让每个人在 Google Play 和 Android 上使用他们最喜欢的应用时感到舒适对我们来说很重要。我……",
            "tags": "Android"
        },
        {
            "title": "maybe-you-dont-need-rust-to-speed-up-your-js-2.md",
            "date": "Mon, 02 Jul 2018 00:43:26 GMT",
            "slug": "或许你并不需要 Rust 和 WASM 来提升 JS 的执行效率 — 第二部分",
            "category": "前端",
            "tag": "",
            "des": "以下内容为本系列文章的第二部分，如果你还没看第一部分，请移步或许你并不需要 Rust 和 WASM 来提升 JS 的执行效率 — 第一部分。我尝试过三种不同的方法对 Base64 VLQ 段进行解码。第一个是 decodeCached，它与 source-map 使用的默认实现方式完全相同 — 我已经在上面列出了：第二个是 decodeNoCaching。它实际上就是没有缓存的 decodeCac……",
            "tags": "Javascript"
        },
        {
            "title": "a-real-world-comparison-of-front-end-frameworks-with-benchmarks-2018-update.md",
            "date": "Fri, 15 Jun 2018 06:13:16 GMT",
            "slug": "前端开发框架的实战对比（2018 年更新）",
            "category": "前端",
            "tag": "",
            "des": "本文是是对 2017 年 12 月发表的 前端开发框架的实战对比 一文的更新。在对比中，我们将展示不同框架之间去实现几乎相同的 实战示例应用 有怎样的差别。实战示例应用 为我们提供了：✅ Angular 没有用于生产环境。之前实战应用仓库列出的示例应用使用的是一个开发版本，感谢 Jonathan Faircloth，它现在已经是生产版本！✅ Vue 没有包含在实战应用仓库，因此未包括在对比中。正如……",
            "tags": "框架"
        },
        {
            "title": "a-simple-guide-to-es6-promises.md",
            "date": "Thu, 07 Jun 2018 06:46:50 GMT",
            "slug": "一个简单的 ES6 Promise 指南",
            "category": "前端",
            "tag": "",
            "des": "The woods are lovely, dark and deep. But I have promises to keep, and miles to go before I sleep. — Robert FrostPromise 是 JavaScript ES6 中最令人兴奋的新增功能之一。为了支持异步编程，JavaScript 使用了回调（callbacks），以及一些其他的技术。然而……",
            "tags": "ES6"
        },
        {
            "title": "vuex-perfect-interface-frontend-backend.md",
            "date": "Thu, 07 Jun 2018 06:46:50 GMT",
            "slug": "为什么 VueX 是前端与 API 之间的完美接口",
            "category": "前端",
            "tag": "",
            "des": "前端 Web 开发复杂性的增加促进了前后端专业化和前后端分离。这种专业化和复杂性的增加有许多好处 —— 网络用户体验的质量呈指数级增长，同时，更多的人将通过多种设备连接彼此，这是史无前例的。但是，它也带来了一些挑战。前端和 API 之间接口的摩擦、挑战和复杂性是一个常见的问题。理想状态下，后端和前端将通过紧密的通信和谐共处，后端提供的数据将完全匹配前端所需的数据。实际上，应用程序的这两个部分通常由……",
            "tags": "Vue"
        },
        {
            "title": "how-javascript-works-inside-the-networking-layer-how-to-optimize-its-performance-and-security.md",
            "date": "Wed, 30 May 2018 05:15:35 GMT",
            "slug": "JavaScript 是如何工作的：深入网络层 + 如何优化性能和安全",
            "category": "前端",
            "tag": "",
            "des": "这是探索 JavaScript 及其内建组件系列文章的第 12 篇。在认识和描述这些核心元素的过程中，我们也会分享我们在构建 SessionStack 时所遵循的一些经验规则。SessionStack 是一个轻量级 JavaScript 应用，它协助用户实时查看和复现他们的 Web 应用缺陷，因此其自身不仅需要足够健壮还要有不俗的性能表现。如果你错过了前面的文章，你可以在下面找到它们：正如我们在前……",
            "tags": "Javascript"
        },
        {
            "title": "how-javascript-works-tracking-changes-in-the-dom-using-mutationobserver.md",
            "date": "Wed, 30 May 2018 05:15:35 GMT",
            "slug": "JavaScript 是如何工作的：用 MutationObserver 追踪 DOM 的变化",
            "category": "前端",
            "tag": "",
            "des": "本系列专门研究 JavaScript 及其构建组件，这是第 10 期。在识别和描述核心元素的过程中，我们也分享了一些构建 SessionStack 的重要法则，SessionStack 是一个 JavaScript 应用，为了帮助用户实时查看和再现他们的 web 应用程序缺陷，它需要健壮并且高性能。web 应用正在持续的越来越侧重客户端，这是由很多原因造成的，例如需要更丰富的 UI 来承载复杂应用……",
            "tags": "Javascript"
        },
        {
            "title": "how-javascript-works-a-comparison-with-webassembly-why-in-certain-cases-its-better-to-use-it.md",
            "date": "Wed, 30 May 2018 05:15:35 GMT",
            "slug": "JavaScript 是如何工作的：对比 WebAssembly + 为什么在某些场景下它比 JavaScript 更合适",
            "category": "前端",
            "tag": "",
            "des": "这是专门探索 JavaScript 及其构建组件系列的第 6 期。在识别和描述核心元素的过程中，我们还分享了构建 SessionStack 时使用的一些经验法则 —— 这是一个轻量级的 JavaScript 应用程序，但必须强大且性能卓越，才能帮助用户实时查看和重现其 Web 应用的缺陷。这次我们将剖析 WebAssembly 的工作原理，更重要的是在性能方面分析它与 JavaScript 的差异……",
            "tags": "Javascript"
        },
        {
            "title": "how-javascript-works-under-the-hood-of-css-and-js-animations-how-to-optimize-their-performance.md",
            "date": "Wed, 30 May 2018 05:15:35 GMT",
            "slug": "JavaScript 是如何工作的：CSS 和 JS 动画背后的原理 + 如何优化性能",
            "category": "前端",
            "tag": "",
            "des": "这是专门探索 JavaScript 及其构建组件系列的第 13 篇文章。在识别和描述核心元素的过程中，我们还分享了构建 SessionStack 时的一些经验法则，SessionStack 是一个足够强大且高性能的 JavaScript 应用程序，用来帮助用户实时查看和重现其 Web 应用程序的缺陷。如果你错过了前面的章节，你可以在这里找到它们：你也知道，动画在创造吸引人的 web app 中扮演……",
            "tags": "Javascript"
        },
        {
            "title": "how-javascript-works-the-rendering-engine-and-tips-to-optimize-its-performance.md",
            "date": "Wed, 30 May 2018 05:15:35 GMT",
            "slug": "JavaScript 是如何工作的：渲染引擎和性能优化技巧",
            "category": "前端",
            "tag": "",
            "des": "这是探索 JavaScript 及其构建组件专题系列的第 11 篇。在识别和描述核心元素的过程中，我们分享了在构建 SessionStack 时使用的一些经验法则。SessionStack 是一个需要鲁棒且高性能的 JavaScript 应用程序，它帮助用户实时查看和重现它们 Web 应用程序的缺陷。当构建 Web 应用程序时，你不只是编写独立运行的 JavaScript 代码片段。你编写的 Ja……",
            "tags": "Javascript"
        },
        {
            "title": "how-javascript-works-the-mechanics-of-web-push-notifications.md",
            "date": "Wed, 30 May 2018 05:15:35 GMT",
            "slug": "JavaScript 是如何工作的：Web 推送通知的机制",
            "category": "前端",
            "tag": "",
            "des": "这是专门研究 JavaScript 及其构建组件系列文章的第 9 章。在识别和描述核心元素的过程中，我们还分享了我们在构建一个轻量级 JavaScript 应用程序 SessionStack 时使用的一些经验规则，该应用程序需要健壮、高性能，可以帮助用户实时查看和重现它们的 Web 应用程序缺陷。如果你错过了前几章，你可以在这里找到它们：今天，我们来关注 Web 推送通知：我们将了解它们的构建组件……",
            "tags": "Javascript"
        },
        {
            "title": "how-javascript-works-service-workers-their-life-cycle-and-use-cases.md",
            "date": "Wed, 30 May 2018 05:15:35 GMT",
            "slug": "JavaScript 是如何工作的：Service Worker 的生命周期与使用场景",
            "category": "前端",
            "tag": "",
            "des": "这是专门探索 JavaScript 及其构建组件的系列的第八个。在识别和描述核心元素的过程中，我们也分享了一些我们在构建 SessionStack 时的最佳实践。SessionStack 是一个强大且性能卓越的 JavaScript 应用程序，可以向你实时显示用户在 Web 应用程序中遇到技术问题或用户体验问题时的具体情况。如果你没看过之前的章节，你可以在这里看到：你可能已经知道了渐进式 Web ……",
            "tags": "Javascript"
        }
    ]
}